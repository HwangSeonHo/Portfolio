package fooddk.controller.tasty;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import fooddk.controller.hoogi.FileUploadController;
import fooddk.domain.Tasty;
import fooddk.service.tasty.TastyService;

@Controller
public class TastyWriteController {
	
	@Autowired
	private TastyService tastyService;
	
	private static final Logger logger = LoggerFactory.getLogger(FileUploadController.class);
	@RequestMapping(value="/TastyWriteAction")
	public String tastyWriteAction(@RequestParam String strLocation ,@ModelAttribute Tasty tasty, @RequestParam("file") MultipartFile file,HttpServletRequest req){
		
		/*이미지 저장*/
		if(!file.isEmpty()){
			try {
				String rootPath =  req.getSession().getServletContext().getRealPath("/assets/images/uploadfile");
				File dir = new File(rootPath);
				if(!dir.exists()) dir.mkdirs();

				System.out.println(dir.getAbsolutePath());
				
				File serverFile = new File(dir.getAbsolutePath() + File.separator + file.getOriginalFilename());
				byte[] bytes = file.getBytes();
				BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(serverFile));
				bos.write(bytes);
				bos.close();
				logger.info("Server File Location=" + serverFile.getAbsolutePath());
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO: handle exception
			}
		}
		tasty.setT_img("images/"+file.getOriginalFilename());
		
		/*location 저장*/
		System.out.println("strLocation" + strLocation);
		System.out.println("length" + strLocation.length());
		
		strLocation.substring(1, strLocation.length());
		strLocation.trim();
		System.out.println("location"+strLocation);
		tasty.setT_location(strLocation);
		
		tastyService.insert(tasty);
		
		return "forward:TastyList";
	}
	
	@RequestMapping(value="/TastyWrite")
	public String tastyWriteForm(){
		return "TastyWriteForm_1";
	}
}
