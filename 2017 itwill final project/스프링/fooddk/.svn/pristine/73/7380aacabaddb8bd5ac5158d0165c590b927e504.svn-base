package fooddk.controller.tasty;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import fooddk.controller.hoogi.FileUploadController;
import fooddk.domain.Hoogi;
import fooddk.domain.Member;
import fooddk.domain.Tasty;
import fooddk.service.hoogi.HoogiServiceImpl;
import fooddk.service.member.MemberService;
import fooddk.service.tasty.TastyServiceImpl;

@Controller
public class TastyModifyController {

	@Autowired
	TastyServiceImpl tastyService;

	@Autowired
	private HoogiServiceImpl hoogiService;
	@Autowired
	private MemberService memberService;

	private static final Logger logger = LoggerFactory.getLogger(FileUploadController.class);

	@RequestMapping(value = "/TastyUpdate")
	public String tastyUpdate(@RequestParam int t_no, Model model) {
		Tasty tasty = tastyService.selectByNo(t_no);
		List<Hoogi> extraList = hoogiService.findHoogi(0, 7);
		model.addAttribute("hoogiList", extraList);
		model.addAttribute("tasty", tasty);
		return "TastyModifyForm_1";
	}

	@RequestMapping(value = "/TastyUpdateAction")
	public String tastyUpdateAction(@ModelAttribute Tasty tasty, Model model, @RequestParam("file") MultipartFile file,
			HttpServletRequest req, @ModelAttribute("sId") String sId) {
		String forwardPath = "";

		if (!file.isEmpty()) {

			try {

				// 바이트로 받고

				String rootPath = req.getSession().getServletContext().getRealPath("/assets/images/uploadfile");

				File dir = new File(rootPath);
				if (!dir.exists())
					dir.mkdirs();

				// Create the file on server
				File serverFile = new File(dir.getAbsolutePath() + File.separator + file.getOriginalFilename());
				byte[] bytes = file.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));
				stream.write(bytes);
				stream.close();

				logger.info("Server File Location=" + serverFile.getAbsolutePath());
				// 경로 + 파일이름

				// 경로이름 : + 파일이름
				tasty.setT_img("images/" + file.getOriginalFilename());

				System.out.println("경로  ->" + file.getOriginalFilename());

			} catch (Exception e) {
				e.printStackTrace();

			}
		} else {

		}

		int rowCount = tastyService.updateByNo(tasty);
		if (rowCount == 1) {

			model.addAttribute("tasty", tasty);
			forwardPath = "redirect:TastyView?t_no=" + tasty.getT_no();
		} else {
			forwardPath = "recipe_error";
		}
		return forwardPath;
	}

	@RequestMapping(value = "/a_TastyUpdateAction")
	public @ResponseBody int a_TastyUpdate(@RequestParam("uploadedfile") MultipartFile file, HttpServletRequest req,
			@ModelAttribute Tasty tasty) {
		System.out.println("###controller실행");
		if (!file.isEmpty()) {
			try {

				// 바이트로 받고

				String rootPath = req.getSession().getServletContext().getRealPath("/assets/images/uploadfile");

				File dir = new File(rootPath);
				if (!dir.exists())
					dir.mkdirs();

				// Create the file on server
				File serverFile = new File(dir.getAbsolutePath() + File.separator + file.getOriginalFilename());
				byte[] bytes = file.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));
				stream.write(bytes);
				stream.close();

				logger.info("Server File Location=" + serverFile.getAbsolutePath());

				// 경로 + 파일이름

				/*
				 * DB에서 가져오는 칼럼 잘라주기 int pathNum =
				 * serverFile.getAbsolutePath().lastIndexOf("images");
				 * System.out.println(serverFile.getAbsolutePath().substring(
				 * pathNum));
				 */
				// 자름
				/*
				 * String path =serverFile.getAbsolutePath().substring(pathNum);
				 * 
				 * System.out.println("경로zzz ->"+path);
				 * model.addAttribute("path", path);
				 */

				// hoogi.setH_img("/tmpFiles/"+serverFile.getAbsolutePath());
				// hoogi.setH_img("assets/images/uploadfile/"+hhh_img.getOriginalFilename());
				// hoogi.setH_img(serverFile.getAbsolutePath());

				// 경로이름 : + 파일이름
				tasty.setT_img("images/" + file.getOriginalFilename());

				// return "You successfully uploaded file=" +
				// h_img.getOriginalFilename();

				System.out.println("경로  ->" + file.getOriginalFilename());

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {

		}
		tasty.setT_location("0,0");
		System.out.println("###controller 종료");
		return tastyService.updateByNo(tasty);
	}
}
