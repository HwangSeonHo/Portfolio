package fooddk.controller.recipe;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import fooddk.controller.hoogi.FileUploadController;
import fooddk.domain.Member;
import fooddk.domain.Recipe;
import fooddk.service.member.MemberService;
import fooddk.service.recipe.RecipeServiceImpl;
@Controller
public class RecipeJsonController {
	@Autowired
	private RecipeServiceImpl recipeServiceImpl;
	
	@Autowired
	private MemberService memberService;
	
	private static final Logger logger = LoggerFactory.getLogger(FileUploadController.class);
	
	public RecipeJsonController() {
		// TODO Auto-generated constructor stub
	}
	
	@RequestMapping(value="/recipe_list_json")
	public @ResponseBody List<Recipe> recipeListJson(){
		List<Recipe> recipeListJson = recipeServiceImpl.selectAll();
		return recipeListJson;
	}
	
	//android recipe write (아직 sId가져오기 안댐)
	@RequestMapping(value="/android", produces="text/html;charset=UTF-8")
	public @ResponseBody String android(@RequestParam(value="uploadedfile", required=false) MultipartFile file, HttpServletRequest req, 
			@RequestParam("sId") String sId, @ModelAttribute Recipe recipe, Model model ){
		CommonsMultipartResolver resolver = new CommonsMultipartResolver();
        resolver.setDefaultEncoding("UTF-8");
        
		Member member = memberService.selectMemberCheckId(sId);
		int m_no = member.getM_no();
		recipe.setM_no(m_no);
		// 파일이미지
		System.out.println("0★★★★★★★★★★★★★★★★★★★★★★★★★");
		
		if (!file.isEmpty()) {
			
			try {
				// 바이트로 받고
				
			    String rootPath = 
			    		req.getSession().getServletContext().getRealPath("/assets/images/uploadfile");

				File dir = new File(rootPath);
				if (!dir.exists())
					dir.mkdirs();

				// Create the file on server
				File serverFile = new File(dir.getAbsolutePath() + File.separator + file.getOriginalFilename());
				byte[] bytes = file.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));
				stream.write(bytes);
				stream.close();

				logger.info("Server File Location=" + serverFile.getAbsolutePath());
				// 경로 + 파일이름
				
				
			
				//경로이름 : + 파일이름
				recipe.setR_img("images/"+file.getOriginalFilename());
				
				
			
			
				System.out.println("경로  ->"+file.getOriginalFilename());
				
				
			} catch (Exception e) {
				e.printStackTrace();
				
			}
		} else {
			recipe.setR_img("images/default.jpg");
		}
		
		
		int rowCount = recipeServiceImpl.insert(recipe);
	
	
		
		return "";
	}
	
	@RequestMapping(value="/android_modify", produces="text/html;charset=UTF-8")
	public @ResponseBody String modify(@RequestParam(value="uploadedfile", required=false) MultipartFile file, HttpServletRequest req, 
			@RequestParam("sId") String sId, @ModelAttribute Recipe recipe, Model model){
		System.out.println(">>>>>>>>>>"+recipe.getR_no());
		Member member = memberService.selectMemberCheckId(sId);
		int m_no = member.getM_no();
		recipe.setM_no(m_no);
		
		
		// 파일이미지
		System.out.println("0★★★★★★★★★★★★★★★★★★★★★★★★★");
		 // File dir = new File(rootPath + File.separator);
		if (!file.isEmpty()) {
			
			try {
			
				// 바이트로 받고
				
			    String rootPath = 
			    		req.getSession().getServletContext().getRealPath("/assets/images/uploadfile");

				
				File dir = new File(rootPath);
				if (!dir.exists())
					dir.mkdirs();

				// Create the file on server
				File serverFile = new File(dir.getAbsolutePath() + File.separator + file.getOriginalFilename());
				byte[] bytes = file.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));
				stream.write(bytes);
				stream.close();

				logger.info("Server File Location=" + serverFile.getAbsolutePath());
				// 경로 + 파일이름

				//경로이름 : + 파일이름
				recipe.setR_img("images/"+file.getOriginalFilename());

				System.out.println("경로  ->"+file.getOriginalFilename());
				
				
			} catch (Exception e) {
				e.printStackTrace();
				
			}
		} else {
			recipe.setR_img("images/default.jpg");
		}
		
		int update = recipeServiceImpl.updateByNo(recipe);
		
	
		return "";
		
	}
	
}
